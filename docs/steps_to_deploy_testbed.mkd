WIP: Steps to deploy the testbed for different environments
---

## Common Steps

1. Install any pre-requites
   - Install [Docker](https://docs.docker.com/install/)
   - Install [git](https://help.github.com/articles/set-up-git/)
2. Clone https://github.com/cncf/cnf-testbed
3. Setup Equinix Metal account
   - Create an [Equinix Metal account](https://metal.equinix.com/start/) ([help page]((https://metal.equinix.com/developers/docs/))
   - Create a Equinix Metal project
   - Take note of the Project UUID and Project Name from the Project Settings page
   - Create a Project API key for terraform and ansible to use
   - Add your personal ssh key in Equinix Metal Project Settings under SSH Keys on the left.
        - Alternatively, you can configure your ssh key on your user account and it will be automatically added to the hosts created in your projects. You can do so by clicking the down arrow icon next to your profile picture then clicking the SSH Keys link in the drop down
   - Create the build containers as per [Build the tools](openstack_deploy.md#build-the-tools)

For additional optimization of the quad-Intel Equinix Metal machines (eg. turning on hyper-threading) see the [quad Intel install docs](./quad_intel_install.md)

## Openstack deploy

See [steps to deploy openstack documentation](openstack_deploy.md) for specifics on deployment.

#### Overview of deploy steps for OpenStack

1. Change directory: `cd cnf-testbed/tools`
1. Create your configuration file openstack-cluster.env (from openstack-cluster.env.example) with the required fields overridden:
    - Equinix Metal API key/auth token created above
    - Equinix Metal Project ID
    - Equinix Metal Project Name
    - Facility (note: this field typically has a default but you will likely want to adjust it according to the region the deployment host is running from)
1. Source your config: `source openstack-cluster.env`
1. Run the [deploy_openstack_cluster.sh](/tools/deploy_openstack_cluster.sh) script to start the deployment

#### Overview of stages in OpenStack deployment
1. Terraform starts Ansible which pre-configures the Equinix Metal machines (using the openstack infrastructure playbook). The playbook configures the data plane interfaces, installs mellanox drivers, optimizes grub config and reboots the compute nodes
1. Ansible then runs the openstack install playbook, which configures the Equinix Metal switch and VLANs and then deploys OpenStack using Chef to the nodes
1. Ansible then installs & configures VPP as a vSwitch using the Openstack vpp-networking plugin to all compute nodes in the cluster
1. All OpenStack compute nodes are available for scheduling

#### Additional testing
1. Running the test_openstack_create.sh script will conduct a simple test
1. Openstack network/neutron resources are created:
    - Vlans
    - Vlan subnets
    - External network with router and routes to vlan subnets
    - iptables masquerade for all traffic coming from the vpp uplink interface (including enabling ipv*n* forwarding configs on the host)
1. A compute VM is created and a floating IP assigned to it
1. The controller node then establishes an SSH connection to the newly created VM via the floating IP
1. The outcome of the connection attempt is printed then the created resources are deleted and config changes reverted


## K8s

See [steps to deploy k8s documentation](./k8s_deploy.md) for specifics on how to deploy.


Overview of deploy stages for K8s

1. Change directory: `cd cnf-testbed/tools`
1. Create your configuration file k8s-cluster.env (from k8s-cluster.env.example) with the required fields overridden:
    - Equinix Metal API key/auth token created above
    - Equinix Metal Project ID
    - Equinix Metal Project Name
    - Facility (note: this field typically has a default but you will likely want to adjust it according to the region the deployment host is running from)
1. Run the [deploy_k8s_cluster.sh](/tools/deploy_k8s_cluster.sh) deploy cluster script which provisions the Equinix Metal machines and starts the K8s bootstrap process
1. Cross-cloud container Cloud-init bootstraps the Kubernetes cluster on the nodes.
1. The k8s vpp vswitch installer runs the Ansible k8s vpp vswitch playbook which configures the Equinix Metal switch and VLANs
1. Ansible then optimizes the system configuration, installs & configures the VPP vSwitch and reboots the worker nodes

