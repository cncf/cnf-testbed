---
- hosts: localhost
  vars:
    k8s: false

  pre_tasks:
  - name: Enable python pip
    apt:
      name: ['python-dev','python-pip']
  - name: Install OpenShift client
    pip:
      name:
        - openshift>=0.6
        - pyyaml>=3.11

- hosts: all
  vars:
    k8s: false
    use_case: None
    privileged: true
    nfvbench_macs:
      - "e4:43:4b:2e:9f:e2"
      - "e4:43:4b:2e:9f:e3"

  pre_tasks:
  - name: Check use_case
    fail:
      msg: "Please specify use_case=[ipsec|3c2n-csp|3c2n-csc] when running"
    when: use_case != "ipsec" and use_case != "3c2n-csp" and use_case != "3c2n-csc"

  - name: Check K8S_AUTH_KUBECONFIG if k8s
    local_action: stat path="{{ lookup('env', 'K8S_AUTH_KUBECONFIG') }}"
    register: kubeconfig

  - name: Verify that kubeconfig exists
    fail:
      msg: "Kubeconfig file not found at: {{ lookup('env', 'K8S_AUTH_KUBECONFIG') }}"
    when: not kubeconfig.stat.exists and k8s

  - name: Check if Docker is installed
    command: which docker
    changed_when: false
    # failed_when: docker_installed.rc not in [0,1]
    register: docker_installed

  - name: Fail is Docker is not installed
    fail:
      msg: "Docker is not installed - Exiting play"
    when: docker_installed.rc not in [ 0 ]

  - name: Install utilities
    apt:
      name: pciutils
      state: present
      update_cache: yes

  - name: install pip
    apt:
      name: ['python-dev','python-pip']
      state: present

  - name: install Docker SDK for Python
    pip:
      name: docker

  - name: Get NIC type
    shell: 'lspci | grep Eth | head -n 1 | grep -oP "controller:\s+\K\w+"'
    register: lspci_nic

  - name: Set NIC fact
    set_fact:
      intel_nic: "{{ true if lspci_nic.stdout == 'Intel' else false }}"

    # Workaround for Ansible 2.7
  - name: Get info on vppcontainer
    command: docker inspect --format={{ '{{.State.Running}}' }} vppcontainer
    changed_when: false
    ignore_errors: true
    register: vppcontainer
  - name: Check if vppcontainer exists
    debug:
      msg: "vppcontainer {{ 'exists' if vppcontainer.rc in [ 0 ] else 'does not exist' }}"

# For use with Ansible 2.8
#  - name: Get info on VPP
#    docker_container_info:
#      name: vppcontainer
#    register: vppcontainer
#  - name: Check if vppcontainer exists
#    debug:
#      msg: "The container {{ 'exists' if vppcontainer.exists else 'does not exist' }}"
 
  - name: Get info on vpp service
    command: systemctl status vpp
    changed_when: false
    ignore_errors: true
    register: vpp_service
    failed_when: vpp_service.rc not in [0,4]

  - name: Check if vpp service is running
    debug:
      msg: "vpp service {{ 'running' if vpp_service.rc in [ 0 ] else 'not running' }}"

  - name: Set vpp fact 1
    set_fact:
      vppc: "{{ true if vppcontainer.rc in [ 0 ] else false }}"

  - name: set vpp fact 2
    set_fact:
      vpps: "{{ true if vpp_service.rc in [ 0 ] else false }}"

  - name: Ensure one instance of VPP is running
    fail:
      msg: "Zero or two instances of VPP running"
    when: vppc == vpps

  - name: Get existing CNFs
    shell: docker ps -a | grep CNF | awk '{print $1}'
    changed_when: false
    register: cnf_list

  - name: Remove existing CNFs
    command: docker rm --force {{ item }}
    with_items: "{{ cnf_list.stdout_lines }}"

  roles:
    - cnf_install

- hosts: localhost
  vars:
    k8s: false
    privileged: true

  tasks:
  - name: Create a k8s namespace
    k8s:
      name: cnf
      api_version: v1
      kind: Namespace
      state: present
    when: k8s

  - name: Remove CNFs (K8s)
    k8s:
      state: absent
      definition:
        kind: Deployment
        metadata:
          name: "cnf-{{ item }}"
          namespace: cnf
    with_sequence: count=6
    ignore_errors: true

  - name: Run cnf_install_k8s role
    include_role:
      name: cnf_install_k8s
    when: k8s

- hosts: all
  vars:
    k8s: false

  tasks:
  - name: Restart VPP container (Post-deploy)
    command: docker restart vppcontainer
    when: vppc

  - name: Restart VPP service (Post-deploy)
    service:
      name: vpp
      state: restarted
    when: vpps
