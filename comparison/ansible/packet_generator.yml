---

- hosts: localhost
  pre_tasks:
    - name: Set VLANs (Intel)
      set_fact:
        vlans:
          vlan1:
            interface: eth2
          vlan2:
            interface: eth3
      when: intel
    - name: set VLANs (Mellanox)
      set_fact:
        vlans:
          vlan1:
            interface: eth1
          vlan2:
            interface: eth1
      when: not intel
  vars:
    facility: "{{ lookup('env','PACKET_FACILITY') }}"
    deploy_env: "{{ lookup('env','DEPLOY_ENV') }}"
    intel: "{{ true if quad_intel is defined else false }}"
    server_list: "{{ lookup('env','SERVER_LIST') }}"
    project_name: "{{ lookup('env','PROJECT_NAME') }}"
  roles:
    - packet_l2

- hosts: all
  pre_tasks:
  - name: Apt update
    apt:
      update_cache: yes
  - name: Install Vlan Package
    apt:
      name: vlan
  - name: Install pip
    apt:
      name: python-pip
  - name: Install docker-py
    pip:
      name: docker-py
  - name: Install kernel headers
    shell: "apt-get -y install linux-headers-$(uname -r)"
    when: intel 
  - name: Get bond interface slaves
    setup:
      filter: "{{ ansible_bond0.slaves }}"
  - name: Get dns servers
    setup:
      filter: "{{ ansible_dns.nameservers }}"
  - name: Get Bond0 Public IP
    setup:
      filter: "{{ ansible_bond0.ipv4.address }}"
  - name: Get bond0 netmask
    setup:
      filter: "{{ ansible_bond0.ipv4.netmask }}"
  - name: Echo bond0 netmask
    setup:
      filter: "{{ ansible_default_ipv4.gateway }}"
  - name: Get bond0 internal address
    setup:
      filter: "{{ ansible_bond0_0.ipv4.address }}"
  - name: Get bond0 internal netmask
    setup:
      filter: "{{ ansible_bond0_0.ipv4.netmask }}"
  - name: Get bond0 internal gw
    setup:
      filter: "{{ ansible_bond0_0.ipv4.network }}"
  - name: Install Docker
    include_role:
      name: avinetworks.docker
  - name: Configure interfaces
    include_role:
      name: mrlesmithjr.config-interfaces
  - name: Do Mellanox setup
    include_role:
      name: mellanox_nic
    when: not intel
  - name: Update Grub
    include_role:
      name: grub_packet_generator
  - name: Load VFIO-PCI on startup
    lineinfile:
      path: /etc/modules
      insertafter: EOF
      line: 'vfio-pci'
    when: intel
  - name: Reboot server
    reboot:
      post_reboot_delay: 60
  - name: Ensure rc.local has been started
    service:
      name: rc-local
      state: started
  - name: Sleep for 10 seconds to ensure VFs are available
    wait_for: timeout=10
    when: not intel
  - name: Update Facts
    setup:
    when: not intel
  - name: Sleep for 10 seconds to ensure Facts are updated
    wait_for: timeout=10
    when: not intel
  - name: Get trex_port_0 pci id (MLX)
    setup:
      filter: "{{ ansible_enp94s0f4.pciid }}"
    when: not intel
  - name: Get trex_port_1 pci id (MLX)
    setup:
      filter: "{{ ansible_enp94s0f5.pciid }}"
    when: not intel

  vars:
    intel: "{{ true if quad_intel is defined else false }}"
    trex_port_0_pci: "{{ ansible_eno3.pciid if intel else ansible_enp94s0f4.pciid }}"
    trex_port_1_pci: "{{ ansible_eno4.pciid if intel else ansible_enp94s0f5.pciid }}"
    mellanox_pf: "enp94s0f1"
    nfvbench_service_chain_count: 3
    nfvbench_vlan_id1: "{{ hostvars.localhost.vlans.vlan1.vid }}"
    nfvbench_vlan_id2: "{{ hostvars.localhost.vlans.vlan2.vid }}"
    nfvbench_vlan_tagging: "{{ false if intel else true }}"
    config_network_bonds: true
    config_network_bridges: false
    config_network_interfaces: true
    enable_configured_interfaces_after_defining: true
    dns_nameservers:
      - "{{ ansible_dns.nameservers[0] }}"
      - "{{ ansible_dns.nameservers[0] }}"
    network_bonds:
      - name: 'bond0'
        configure: true
        method: 'static'
        address: "{{ ansible_bond0.ipv4.address }}"
        netmask: "{{ ansible_bond0.ipv4.netmask }}"
        gateway: "{{ ansible_default_ipv4.gateway }}"
        parameters:
          - param: 'bond-downdelay'
            val: '200'
          - param: 'bond-miimon'
            val: '100'
          - param: 'bond-mode'
            val: '4'
          - param: 'bond-updelay'
            val: '200'
          - param: 'bond-xmit_hash_policy'
            val: 'layer3+4'
          - param: 'bond-lacp-rate'
            val: '1'
        slaves:
          - "{{ ansible_bond0.slaves[0] }}"
      - name: 'bond0:0'
        configure: true
        method: 'static'
        address: "{{ ansible_bond0_0.ipv4.address }}"
        netmask: "{{ ansible_bond0_0.ipv4.netmask }}"
        parameters:
          - param: 'post-up'
            val: "route add -net 10.0.0.0/8 gw {{ ansible_bond0_0.ipv4.network }}"
          - param: 'post-down'
            val: "route del -net 10.0.0.0/8 gw {{ ansible_bond0_0.ipv4.network }}"
    network_interfaces:
      - name: "{{ ansible_bond0.slaves[0] }}"
        configure: true
        method: 'manual'
        parameters:
          - param:
            val: 'bond-master bond0'
  roles:
    - nfvbench_common
